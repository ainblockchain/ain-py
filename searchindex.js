Search.setIndex({"docnames": ["ain", "ain.account", "ain.ain", "ain.db", "ain.db.ref", "ain.errors", "ain.net", "ain.provider", "ain.types", "ain.utils", "ain.utils.v3keystore", "ain.wallet", "index"], "filenames": ["ain.rst", "ain.account.rst", "ain.ain.rst", "ain.db.rst", "ain.db.ref.rst", "ain.errors.rst", "ain.net.rst", "ain.provider.rst", "ain.types.rst", "ain.utils.rst", "ain.utils.v3keystore.rst", "ain.wallet.rst", "index.rst"], "titles": ["ain package", "ain.account module", "ain.ain module", "ain.db package", "ain.db.ref module", "ain.errors module", "ain.net module", "ain.provider module", "ain.types module", "ain.utils package", "ain.utils.v3keystore module", "ain.wallet module", "Welcome to ain-py\u2019s documentation!"], "terms": {"db": [0, 2, 12], "util": [0, 2, 11, 12], "account": [0, 2, 9, 10, 11, 12], "provid": [0, 2, 3, 6, 9, 11, 12], "net": [0, 2, 12], "wallet": [0, 2, 12], "type": [0, 2, 3, 4, 9, 11, 12], "error": [0, 12], "class": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11], "privatekei": [1, 9, 10, 11], "byte": [1, 8, 9, 10, 11], "str": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "none": [1, 2, 3, 4, 8, 9, 10, 11], "base": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11], "object": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11], "blockchain": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "paramet": [1, 2, 3, 4, 7, 8, 9, 10, 11], "union": [1, 9, 10, 11], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "privat": [1, 9, 10, 11], "kei": [1, 4, 8, 9, 10, 11], "classmethod": [1, 8, 10], "creat": [1, 3, 4, 7, 8, 9, 11], "entropi": 1, "init": 1, "an": [1, 2, 4, 5, 9, 10, 11], "given": [1, 2, 3, 4, 8, 9, 11], "default": [1, 2, 3, 4, 9, 10, 11], "frommnemon": 1, "mnemon": [1, 9, 11], "index": [1, 2, 9, 11, 12], "int": [1, 2, 5, 6, 8, 9, 10, 11], "0": [1, 2, 9, 11], "address": [1, 2, 7, 8, 9, 10, 11], "private_kei": 1, "public_kei": 1, "public": [1, 9, 11], "providerurl": 2, "chainid": [2, 9, 11], "ainopt": [2, 8], "instanc": [2, 3, 4, 6, 11], "interactor": 2, "url": 2, "listen": [2, 6], "node": [2, 6, 7], "chain": [2, 6, 9, 11], "id": [2, 6, 8, 9, 10, 11], "option": [2, 3, 4, 8, 10, 11], "thi": [2, 4, 8, 9, 11], "depositconsensusstak": 2, "input": [2, 4, 8, 9], "valueonlytransactioninput": [2, 4, 8], "ani": [2, 4, 6, 8, 9, 11], "send": [2, 7, 11], "transact": [2, 4, 8, 9, 11], "deposit": 2, "consensu": [2, 6], "stake": 2, "valu": [2, 4, 7, 8, 9, 11], "onli": [2, 8, 11], "return": [2, 3, 4, 6, 7, 8, 9, 10, 11], "result": [2, 4, 5, 7, 8, 9, 11], "async": [2, 4, 6, 7, 11], "getblockbyhash": 2, "blockhash": 2, "returntransactionobject": 2, "bool": [2, 4, 6, 8, 9, 11], "fals": [2, 4, 9, 11], "get": [2, 4, 8, 9, 11], "block": [2, 11], "hash": [2, 4, 8, 9, 11], "If": [2, 3, 4, 8, 9, 11], "true": [2, 4, 8, 9, 11], "full": [2, 11], "getblockbynumb": 2, "blocknumb": 2, "number": [2, 6, 9, 11], "getblockheaderslist": 2, "begin": [2, 4], "end": [2, 4], "list": [2, 4, 8, 9, 11], "fetch": [2, 4, 6, 7, 11], "header": [2, 9], "rang": 2, "inclus": 2, "exclus": 2, "getblocklist": 2, "getblocktransactioncountbyhash": 2, "count": [2, 9, 11], "getblocktransactioncountbynumb": 2, "getconsensusstakeamount": 2, "amount": [2, 11], "current": [2, 9, 11], "particip": 2, "protocol": [2, 6], "getlastblock": 2, "last": [2, 11], "arg": [2, 7], "getlastblocknumb": 2, "getpendingtransact": 2, "pend": [2, 11], "getproposerbyhash": 2, "propros": 2, "": [2, 7, 8, 9, 11], "propos": 2, "getproposerbynumb": 2, "getstateusag": 2, "appnam": 2, "state": [2, 3, 4, 8], "usag": 2, "app": [2, 8], "name": [2, 7, 8, 10], "gettransactionbyblockhashandindex": 2, "inform": [2, 4, 6, 8, 11], "gettransactionbyblocknumberandindex": 2, "gettransactionbyhash": 2, "transactionhash": 2, "gettransactionpoolsizeutil": 2, "pool": [2, 11], "size": [2, 9], "getvalidatorinfo": 2, "valid": [2, 6, 9, 11], "getvalidatorsbyhash": 2, "getvalidatorsbynumb": 2, "sendsignedtransact": 2, "signatur": [2, 8, 9, 11], "txbodi": 2, "transactionbodi": [2, 8, 9, 11], "isdryrun": [2, 4, 11], "sign": [2, 9, 11], "network": [2, 6, 11], "bodi": [2, 8, 9], "dryrun": [2, 4, 11], "api": [2, 4, 5, 7], "sendtransact": 2, "transactionobject": 2, "transactioninput": [2, 4, 8], "sendtransactionbatch": 2, "multipl": [2, 4, 8], "batch": 2, "setprovid": 2, "set": [2, 4, 8, 11], "new": [2, 4, 11], "setsign": 2, "signer": 2, "validateappnam": 2, "withdrawconsensusstak": 2, "withdraw": 2, "databas": [2, 3, 4], "rawresultmod": [2, 8], "flag": [2, 4, 8], "raw": [2, 6, 8], "mode": [2, 8], "submodul": [3, 9, 12], "ref": [3, 8], "modul": [3, 9, 12], "content": [3, 9], "path": [3, 4, 8], "refer": [3, 4, 8], "global": [3, 4, 8], "tree": [3, 8], "you": [3, 4, 8, 9, 11], "want": [3, 4, 8, 9, 11], "i": [3, 4, 6, 8, 9, 11], "root": 3, "static": 4, "buildgetrequest": 4, "liter": [4, 8], "get_valu": [4, 8], "get_rul": [4, 8], "get_own": [4, 8], "get_funct": [4, 8], "getopt": [4, 8], "dict": [4, 7, 10, 11], "build": 4, "request": 4, "getoperationtyp": 4, "oper": [4, 8], "make": [4, 8], "decrementvalu": 4, "decrement": 4, "deletevalu": 4, "delet": 4, "overwritten": 4, "null": 4, "evalown": 4, "param": [4, 7, 10], "evalownerinput": [4, 8], "eval": [4, 8], "owner": [4, 8], "evalu": 4, "evalrul": 4, "evalruleinput": [4, 8], "rule": [4, 8, 9], "satisfi": 4, "write": 4, "extendpath": 4, "basepath": 4, "extens": 4, "extend": 4, "under": 4, "extendsetmultitransactioninput": 4, "setmultitransactioninput": [4, 8], "appropri": 4, "op_list": [4, 8], "setmultioperationtyp": 4, "decor": 4, "extendsettransactioninput": 4, "set_valu": [4, 8], "inc_valu": [4, 8], "dec_valu": [4, 8], "set_rul": [4, 8], "set_own": [4, 8], "set_funct": [4, 8], "isglob": 4, "setoperationtyp": 4, "getoper": [4, 8], "function": [4, 9, 10], "arrai": 4, "could": [4, 11], "one": [4, 9], "from": [4, 9, 10, 11], "func": 4, "combin": 4, "them": [4, 11], "getfunct": 4, "config": 4, "getown": 4, "getproofhash": 4, "stateinfoinput": [4, 8], "proof": [4, 8], "info": [4, 8], "getrul": 4, "getstateinfo": 4, "getstateproof": 4, "getvalu": 4, "incrementvalu": 4, "increment": 4, "matchfunct": 4, "matchinput": [4, 8], "match": [4, 8, 9], "ar": [4, 9, 10, 11], "relat": 4, "matchown": 4, "matchrul": 4, "push": 4, "child": 4, "virtual": 4, "so": 4, "doesn": [4, 11], "t": [4, 9, 11], "pushvalu": 4, "sanitizeref": 4, "sanit": 4, "A": [4, 9], "It": [4, 9, 11], "should": [4, 8, 9], "have": [4, 9], "slash": 4, "process": 4, "setfunct": 4, "setisglob": 4, "us": [4, 8, 11], "setown": 4, "setrul": 4, "setvalu": 4, "properti": [4, 11], "except": 5, "blockchainerror": 5, "code": [5, 10], "messag": [5, 9, 10], "custom": 5, "statu": 6, "checker": 6, "checkprotocolvers": 6, "check": [6, 9], "version": [6, 8, 10], "getchainid": 6, "blokchain": 6, "getconsensusstatu": 6, "geteventhandlernetworkinfo": 6, "event": 6, "handler": 6, "getnetworkid": 6, "connect": 6, "getpeercandidateinfo": 6, "peer": 6, "candid": 6, "getpeercount": 6, "getprotocolvers": 6, "getrawconsensusstatu": 6, "data": [6, 9, 11], "islisten": 6, "whether": [6, 9, 11], "issync": 6, "sync": 6, "protov": 6, "endpoint": 7, "getaddress": 7, "rpcmethod": 7, "json": [7, 9, 10], "rpc": [7, 8], "payload": 7, "method": [7, 8, 9], "respons": 7, "apiendpoint": 7, "ecdsasignatur": [8, 9], "r": [8, 10], "v": 8, "ecdsa": [8, 9], "fromsignatur": 8, "convert": [8, 9, 10, 11], "format": [8, 9], "eth_sign": 8, "eciesencrypt": [8, 9], "iv": [8, 10], "ephempublickei": 8, "ciphertext": [8, 10], "mac": [8, 10], "eci": [8, 9], "encrypt": [8, 9, 10, 11], "permiss": 8, "branch_own": 8, "write_funct": 8, "write_own": 8, "write_rul": 8, "is_glob": 8, "sender": 8, "interpret": 8, "timestamp": [8, 9, 11], "unix": [8, 9], "time": 8, "millisecond": 8, "when": [8, 9], "ha": [8, 11], "been": [8, 11], "getmultioper": 8, "is_fin": 8, "is_shallow": 8, "include_vers": 8, "include_tree_info": 8, "include_proof": 8, "includ": 8, "addit": 8, "final": 8, "shallow": 8, "children": 8, "setmultioper": 8, "setoper": 8, "parent_tx_hash": 8, "nonc": [8, 11], "gas_pric": [8, 11], "transactioninputbas": 8, "ga": [8, 11], "price": [8, 11], "parent": 8, "nest": 8, "queri": 8, "tx_bodi": 8, "bill": 8, "transactionbodybas": 8, "must": [8, 9], "app_nam": 8, "billing_id": 8, "valueonlytransactionbodybas": 8, "v3keystor": [9, 11], "addhexprefix": 9, "add": [9, 11], "hex": [9, 11], "prefix": [9, 11], "0x": 9, "string": [9, 11], "doe": 9, "aresameaddress": 9, "address1": 9, "address2": 9, "two": 9, "same": 9, "first": 9, "second": 9, "bytestohex": 9, "countdecim": 9, "float": [9, 11], "decim": 9, "decryptwithprivatekei": 9, "decrypt": 9, "ecrecoverpub": 9, "msghash": 9, "recov": [9, 11], "ecsignhash": 9, "ecsignmessag": 9, "note": 9, "tobyt": 9, "unsupport": 9, "rais": [9, 11], "typeerror": 9, "ecsigntransact": 9, "txdata": 9, "ecverifysig": 9, "verifi": [9, 11], "encodevarint": 9, "encod": 9, "bitcoin": 9, "variabl": 9, "length": [9, 10, 11], "integ": 9, "encryptwithpublickei": 9, "publickei": 9, "generatemnemon": 9, "gener": 9, "random": 9, "english": 9, "randomli": 9, "gettimestamp": [9, 11], "hashmessag": 9, "varint": 9, "keccak": 9, "256": 9, "ainetwork": 9, "hashtransact": 9, "ishexprefix": 9, "ishexstr": 9, "isvalidaddress": 9, "isvalidpriv": 9, "follow": 9, "curv": 9, "secp256k1": 9, "isvalidpubl": 9, "issec1": 9, "meet": 9, "requir": 9, "sec1": 9, "bit": 9, "224": 9, "456": 9, "384": 9, "512": 9, "mnemonictoprivatekei": 9, "padtoeven": 9, "pad": 9, "lead": 9, "zero": 9, "even": 9, "odd": 9, "itself": 9, "privatetoaddress": 9, "checksum": 9, "privatetopubl": 9, "pubtoaddress": 9, "which": [9, 11], "lower": 9, "160": 9, "replacefloat": 9, "matchobj": 9, "replac": 9, "striphexprefix": 9, "strip": 9, "attempt": 9, "equival": 9, "tobuff": 9, "ainblockchain": 9, "support": [9, 10], "tochecksumaddress": 9, "isn": 9, "valueerror": [9, 11], "tojslikefloat": 9, "serial": 9, "reformat": 9, "javascript": 9, "like": 9, "tojsonstr": 9, "obj": 9, "cipherparam": 10, "cipher": 10, "initi": 10, "vector": 10, "crypto": 10, "kdf": 10, "deriv": 10, "scrypt": 10, "pbkdf2": 10, "kdfparam": 10, "authent": 10, "v3": [10, 11], "keystor": [10, 11], "fromjson": 10, "v3keystorejson": 10, "stringifi": 10, "fromprivatekei": 10, "password": [10, 11], "v3keystoreopt": [10, 11], "toprivatekei": 10, "uuid": 10, "salt": 10, "dklen": 10, "n": 10, "p": 10, "c": 10, "desir": 10, "predetermin": 10, "accounttov3keystor": 11, "addandsetdefaultaccount": 11, "Then": 11, "addfromhdwallet": 11, "seed": 11, "phrase": 11, "ad": 11, "addfromv3keystor": 11, "your": 11, "clear": 11, "remov": 11, "all": 11, "numberofaccount": 11, "posit": 11, "getbal": 11, "balanc": 11, "gethashstrfromsig": 11, "getimpliedaddress": 11, "impli": 11, "getnonc": 11, "sourc": 11, "either": 11, "commit": 11, "getpublickei": 11, "empti": 11, "2": 11, "isad": 11, "alreadi": 11, "wa": 11, "exist": 11, "removedefaultaccount": 11, "setdefaultaccount": 11, "signtransact": 11, "tx": 11, "tov3keystor": 11, "save": 11, "lock": 11, "transfer": 11, "toaddress": 11, "fromaddress": 11, "verifysignatur": 11, "made": 11, "who": 11, "defaultaccount": 11, "packag": 12, "subpackag": 12, "search": 12, "page": 12}, "objects": {"": [[0, 0, 0, "-", "ain"]], "ain": [[1, 0, 0, "-", "account"], [2, 0, 0, "-", "ain"], [3, 0, 0, "-", "db"], [5, 0, 0, "-", "errors"], [6, 0, 0, "-", "net"], [7, 0, 0, "-", "provider"], [8, 0, 0, "-", "types"], [9, 0, 0, "-", "utils"], [11, 0, 0, "-", "wallet"]], "ain.account": [[1, 1, 1, "", "Account"]], "ain.account.Account": [[1, 2, 1, "", "address"], [1, 3, 1, "", "create"], [1, 3, 1, "", "fromMnemonic"], [1, 2, 1, "", "private_key"], [1, 2, 1, "", "public_key"]], "ain.ain": [[2, 1, 1, "", "Ain"]], "ain.ain.Ain": [[2, 2, 1, "", "chainId"], [2, 2, 1, "", "db"], [2, 3, 1, "", "depositConsensusStake"], [2, 3, 1, "", "getBlockByHash"], [2, 3, 1, "", "getBlockByNumber"], [2, 3, 1, "", "getBlockHeadersList"], [2, 3, 1, "", "getBlockList"], [2, 3, 1, "", "getBlockTransactionCountByHash"], [2, 3, 1, "", "getBlockTransactionCountByNumber"], [2, 3, 1, "", "getConsensusStakeAmount"], [2, 3, 1, "", "getLastBlock"], [2, 3, 1, "", "getLastBlockNumber"], [2, 3, 1, "", "getPendingTransactions"], [2, 3, 1, "", "getProposerByHash"], [2, 3, 1, "", "getProposerByNumber"], [2, 3, 1, "", "getStateUsage"], [2, 3, 1, "", "getTransactionByBlockHashAndIndex"], [2, 3, 1, "", "getTransactionByBlockNumberAndIndex"], [2, 3, 1, "", "getTransactionByHash"], [2, 3, 1, "", "getTransactionPoolSizeUtilization"], [2, 3, 1, "", "getValidatorInfo"], [2, 3, 1, "", "getValidatorsByHash"], [2, 3, 1, "", "getValidatorsByNumber"], [2, 2, 1, "", "net"], [2, 2, 1, "", "provider"], [2, 2, 1, "", "rawResultMode"], [2, 3, 1, "", "sendSignedTransaction"], [2, 3, 1, "", "sendTransaction"], [2, 3, 1, "", "sendTransactionBatch"], [2, 3, 1, "", "setProvider"], [2, 3, 1, "", "setSigner"], [2, 2, 1, "", "signer"], [2, 3, 1, "", "validateAppName"], [2, 2, 1, "", "wallet"], [2, 3, 1, "", "withdrawConsensusStake"]], "ain.db": [[3, 1, 1, "", "Database"], [4, 0, 0, "-", "ref"]], "ain.db.Database": [[3, 3, 1, "", "ref"]], "ain.db.ref": [[4, 1, 1, "", "Reference"]], "ain.db.ref.Reference": [[4, 3, 1, "", "buildGetRequest"], [4, 3, 1, "", "decrementValue"], [4, 3, 1, "", "deleteValue"], [4, 3, 1, "", "evalOwner"], [4, 3, 1, "", "evalRule"], [4, 3, 1, "", "extendPath"], [4, 3, 1, "", "extendSetMultiTransactionInput"], [4, 3, 1, "", "extendSetTransactionInput"], [4, 3, 1, "", "get"], [4, 3, 1, "", "getFunction"], [4, 3, 1, "", "getOwner"], [4, 3, 1, "", "getProofHash"], [4, 3, 1, "", "getRule"], [4, 3, 1, "", "getStateInfo"], [4, 3, 1, "", "getStateProof"], [4, 3, 1, "", "getValue"], [4, 3, 1, "", "incrementValue"], [4, 4, 1, "", "key"], [4, 3, 1, "", "matchFunction"], [4, 3, 1, "", "matchOwner"], [4, 3, 1, "", "matchRule"], [4, 4, 1, "", "path"], [4, 3, 1, "", "push"], [4, 3, 1, "", "pushValue"], [4, 3, 1, "", "sanitizeRef"], [4, 3, 1, "", "set"], [4, 3, 1, "", "setFunction"], [4, 3, 1, "", "setIsGlobal"], [4, 3, 1, "", "setOwner"], [4, 3, 1, "", "setRule"], [4, 3, 1, "", "setValue"]], "ain.errors": [[5, 5, 1, "", "BlockchainError"]], "ain.errors.BlockchainError": [[5, 2, 1, "", "code"], [5, 2, 1, "", "message"]], "ain.net": [[6, 1, 1, "", "Network"]], "ain.net.Network": [[6, 3, 1, "", "checkProtocolVersion"], [6, 3, 1, "", "getChainId"], [6, 3, 1, "", "getConsensusStatus"], [6, 3, 1, "", "getEventHandlerNetworkInfo"], [6, 3, 1, "", "getNetworkId"], [6, 3, 1, "", "getPeerCandidateInfo"], [6, 3, 1, "", "getPeerCount"], [6, 3, 1, "", "getProtocolVersion"], [6, 3, 1, "", "getRawConsensusStatus"], [6, 3, 1, "", "isListening"], [6, 3, 1, "", "isSyncing"], [6, 2, 1, "", "protoVer"], [6, 2, 1, "", "provider"]], "ain.provider": [[7, 1, 1, "", "Provider"]], "ain.provider.Provider": [[7, 2, 1, "", "apiEndPoint"], [7, 2, 1, "", "endPoint"], [7, 3, 1, "", "getAddress"], [7, 3, 1, "", "send"]], "ain.types": [[8, 1, 1, "", "AinOptions"], [8, 1, 1, "", "ECDSASignature"], [8, 1, 1, "", "ECIESEncrypted"], [8, 1, 1, "", "EvalOwnerInput"], [8, 1, 1, "", "EvalRuleInput"], [8, 1, 1, "", "GetMultiOperation"], [8, 1, 1, "", "GetOperation"], [8, 1, 1, "", "GetOptions"], [8, 1, 1, "", "MatchInput"], [8, 1, 1, "", "SetMultiOperation"], [8, 1, 1, "", "SetMultiTransactionInput"], [8, 1, 1, "", "SetOperation"], [8, 1, 1, "", "StateInfoInput"], [8, 1, 1, "", "Transaction"], [8, 1, 1, "", "TransactionBody"], [8, 1, 1, "", "TransactionBodyBase"], [8, 1, 1, "", "TransactionInput"], [8, 1, 1, "", "TransactionInputBase"], [8, 1, 1, "", "ValueOnlyTransactionBodyBase"], [8, 1, 1, "", "ValueOnlyTransactionInput"]], "ain.types.AinOptions": [[8, 2, 1, "", "rawResultMode"]], "ain.types.ECDSASignature": [[8, 3, 1, "", "fromSignature"], [8, 2, 1, "", "r"], [8, 2, 1, "", "s"], [8, 2, 1, "", "v"]], "ain.types.ECIESEncrypted": [[8, 2, 1, "", "ciphertext"], [8, 2, 1, "", "ephemPublicKey"], [8, 2, 1, "", "iv"], [8, 2, 1, "", "mac"]], "ain.types.EvalOwnerInput": [[8, 2, 1, "", "address"], [8, 2, 1, "", "is_global"], [8, 2, 1, "", "permission"], [8, 2, 1, "", "ref"]], "ain.types.EvalRuleInput": [[8, 2, 1, "", "address"], [8, 2, 1, "", "is_global"], [8, 2, 1, "", "ref"], [8, 2, 1, "", "timestamp"], [8, 2, 1, "", "value"]], "ain.types.GetMultiOperation": [[8, 2, 1, "", "op_list"], [8, 2, 1, "", "type"]], "ain.types.GetOperation": [[8, 2, 1, "", "is_global"], [8, 2, 1, "", "ref"], [8, 2, 1, "", "type"]], "ain.types.GetOptions": [[8, 2, 1, "", "include_proof"], [8, 2, 1, "", "include_tree_info"], [8, 2, 1, "", "include_version"], [8, 2, 1, "", "is_final"], [8, 2, 1, "", "is_global"], [8, 2, 1, "", "is_shallow"]], "ain.types.MatchInput": [[8, 2, 1, "", "is_global"], [8, 2, 1, "", "ref"]], "ain.types.SetMultiOperation": [[8, 2, 1, "", "op_list"], [8, 2, 1, "", "type"]], "ain.types.SetMultiTransactionInput": [[8, 2, 1, "", "address"], [8, 2, 1, "", "gas_price"], [8, 2, 1, "", "nonce"], [8, 2, 1, "", "op_list"], [8, 2, 1, "", "parent_tx_hash"], [8, 2, 1, "", "timestamp"]], "ain.types.SetOperation": [[8, 2, 1, "", "is_global"], [8, 2, 1, "", "ref"], [8, 2, 1, "", "type"], [8, 2, 1, "", "value"]], "ain.types.StateInfoInput": [[8, 2, 1, "", "ref"]], "ain.types.Transaction": [[8, 2, 1, "", "address"], [8, 2, 1, "", "hash"], [8, 2, 1, "", "signature"], [8, 2, 1, "", "tx_body"]], "ain.types.TransactionBody": [[8, 2, 1, "", "billing"], [8, 2, 1, "", "gas_price"], [8, 2, 1, "", "nonce"], [8, 2, 1, "", "operation"], [8, 2, 1, "", "parent_tx_hash"], [8, 2, 1, "", "timestamp"]], "ain.types.TransactionBodyBase": [[8, 2, 1, "", "operation"], [8, 2, 1, "", "parent_tx_hash"]], "ain.types.TransactionInput": [[8, 2, 1, "", "address"], [8, 2, 1, "", "gas_price"], [8, 2, 1, "", "nonce"], [8, 2, 1, "", "operation"], [8, 2, 1, "", "parent_tx_hash"], [8, 2, 1, "", "timestamp"]], "ain.types.TransactionInputBase": [[8, 2, 1, "", "address"], [8, 2, 1, "", "gas_price"], [8, 2, 1, "", "nonce"], [8, 2, 1, "", "timestamp"]], "ain.types.ValueOnlyTransactionBodyBase": [[8, 2, 1, "", "is_global"], [8, 2, 1, "", "parent_tx_hash"], [8, 2, 1, "", "ref"], [8, 2, 1, "", "value"]], "ain.types.ValueOnlyTransactionInput": [[8, 2, 1, "", "address"], [8, 2, 1, "", "gas_price"], [8, 2, 1, "", "is_global"], [8, 2, 1, "", "nonce"], [8, 2, 1, "", "parent_tx_hash"], [8, 2, 1, "", "ref"], [8, 2, 1, "", "timestamp"], [8, 2, 1, "", "value"]], "ain.utils": [[9, 6, 1, "", "addHexPrefix"], [9, 6, 1, "", "areSameAddresses"], [9, 6, 1, "", "bytesToHex"], [9, 6, 1, "", "countDecimals"], [9, 6, 1, "", "decryptWithPrivateKey"], [9, 6, 1, "", "ecRecoverPub"], [9, 6, 1, "", "ecSignHash"], [9, 6, 1, "", "ecSignMessage"], [9, 6, 1, "", "ecSignTransaction"], [9, 6, 1, "", "ecVerifySig"], [9, 6, 1, "", "encodeVarInt"], [9, 6, 1, "", "encryptWithPublicKey"], [9, 6, 1, "", "generateMnemonic"], [9, 6, 1, "", "getTimestamp"], [9, 6, 1, "", "hashMessage"], [9, 6, 1, "", "hashTransaction"], [9, 6, 1, "", "isHexPrefixed"], [9, 6, 1, "", "isHexString"], [9, 6, 1, "", "isValidAddress"], [9, 6, 1, "", "isValidPrivate"], [9, 6, 1, "", "isValidPublic"], [9, 6, 1, "", "keccak"], [9, 6, 1, "", "mnemonicToPrivatekey"], [9, 6, 1, "", "padToEven"], [9, 6, 1, "", "privateToAddress"], [9, 6, 1, "", "privateToPublic"], [9, 6, 1, "", "pubToAddress"], [9, 6, 1, "", "replaceFloat"], [9, 6, 1, "", "stripHexPrefix"], [9, 6, 1, "", "toBytes"], [9, 6, 1, "", "toChecksumAddress"], [9, 6, 1, "", "toJsLikeFloats"], [9, 6, 1, "", "toJsonString"], [10, 0, 0, "-", "v3keystore"]], "ain.utils.v3keystore": [[10, 1, 1, "", "Cipherparams"], [10, 1, 1, "", "Crypto"], [10, 1, 1, "", "V3Keystore"], [10, 1, 1, "", "V3KeystoreOptions"]], "ain.utils.v3keystore.Cipherparams": [[10, 2, 1, "", "iv"]], "ain.utils.v3keystore.Crypto": [[10, 2, 1, "", "cipher"], [10, 2, 1, "", "cipherparams"], [10, 2, 1, "", "ciphertext"], [10, 2, 1, "", "kdf"], [10, 2, 1, "", "kdfparams"], [10, 2, 1, "", "mac"]], "ain.utils.v3keystore.V3Keystore": [[10, 2, 1, "", "address"], [10, 2, 1, "", "crypto"], [10, 3, 1, "", "fromJSON"], [10, 3, 1, "", "fromPrivateKey"], [10, 2, 1, "", "id"], [10, 3, 1, "", "toPrivateKey"], [10, 2, 1, "", "version"]], "ain.utils.v3keystore.V3KeystoreOptions": [[10, 2, 1, "", "c"], [10, 2, 1, "", "cipher"], [10, 2, 1, "", "dklen"], [10, 2, 1, "", "iv"], [10, 2, 1, "", "kdf"], [10, 2, 1, "", "n"], [10, 2, 1, "", "p"], [10, 2, 1, "", "r"], [10, 2, 1, "", "salt"], [10, 2, 1, "", "uuid"]], "ain.wallet": [[11, 1, 1, "", "Wallet"]], "ain.wallet.Wallet": [[11, 3, 1, "", "accountToV3Keystore"], [11, 2, 1, "", "accounts"], [11, 3, 1, "", "add"], [11, 3, 1, "", "addAndSetDefaultAccount"], [11, 3, 1, "", "addFromHDWallet"], [11, 3, 1, "", "addFromV3Keystore"], [11, 2, 1, "", "ain"], [11, 2, 1, "", "chainId"], [11, 3, 1, "", "clear"], [11, 3, 1, "", "create"], [11, 2, 1, "", "defaultAccount"], [11, 3, 1, "", "getBalance"], [11, 3, 1, "", "getHashStrFromSig"], [11, 3, 1, "", "getImpliedAddress"], [11, 3, 1, "", "getNonce"], [11, 3, 1, "", "getPublicKey"], [11, 3, 1, "", "getTimestamp"], [11, 3, 1, "", "isAdded"], [11, 4, 1, "", "length"], [11, 3, 1, "", "recover"], [11, 3, 1, "", "remove"], [11, 3, 1, "", "removeDefaultAccount"], [11, 3, 1, "", "setDefaultAccount"], [11, 3, 1, "", "sign"], [11, 3, 1, "", "signTransaction"], [11, 3, 1, "", "toV3Keystore"], [11, 3, 1, "", "transfer"], [11, 3, 1, "", "verifySignature"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:exception", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "titleterms": {"ain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "packag": [0, 3, 9], "subpackag": 0, "submodul": 0, "modul": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11], "content": [0, 12], "account": 1, "db": [3, 4], "ref": 4, "error": 5, "net": 6, "provid": 7, "type": 8, "util": [9, 10], "v3keystor": 10, "wallet": 11, "welcom": 12, "py": 12, "": 12, "document": 12, "indic": 12, "tabl": 12}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"ain package": [[0, "ain-package"]], "Subpackages": [[0, "subpackages"]], "Submodules": [[0, "submodules"]], "Module contents": [[0, "module-ain"]], "ain.account module": [[1, "module-ain.account"]], "ain.ain module": [[2, "module-ain.ain"]], "ain.db package": [[3, "ain-db-package"]], "ain.db.ref module": [[4, "module-ain.db.ref"]], "ain.errors module": [[5, "module-ain.errors"]], "ain.net module": [[6, "module-ain.net"]], "ain.provider module": [[7, "module-ain.provider"]], "ain.types module": [[8, "module-ain.types"]], "ain.utils package": [[9, "ain-utils-package"]], "ain.utils.v3keystore module": [[10, "module-ain.utils.v3keystore"]], "ain.wallet module": [[11, "module-ain.wallet"]], "Welcome to ain-py\u2019s documentation!": [[12, "welcome-to-ain-py-s-documentation"]], "Contents:": [[12, null]], "Indices and tables": [[12, "indices-and-tables"]]}, "indexentries": {"ain": [[0, "module-ain"]], "module": [[0, "module-ain"], [1, "module-ain.account"], [2, "module-ain.ain"], [3, "module-ain.db"], [4, "module-ain.db.ref"], [5, "module-ain.errors"], [6, "module-ain.net"], [7, "module-ain.provider"], [8, "module-ain.types"], [9, "module-ain.utils"], [10, "module-ain.utils.v3keystore"], [11, "module-ain.wallet"]], "account (class in ain.account)": [[1, "ain.account.Account"]], "address (ain.account.account attribute)": [[1, "ain.account.Account.address"]], "ain.account": [[1, "module-ain.account"]], "create() (ain.account.account class method)": [[1, "ain.account.Account.create"]], "frommnemonic() (ain.account.account class method)": [[1, "ain.account.Account.fromMnemonic"]], "private_key (ain.account.account attribute)": [[1, "ain.account.Account.private_key"]], "public_key (ain.account.account attribute)": [[1, "ain.account.Account.public_key"]], "ain (class in ain.ain)": [[2, "ain.ain.Ain"]], "ain.ain": [[2, "module-ain.ain"]], "chainid (ain.ain.ain attribute)": [[2, "ain.ain.Ain.chainId"]], "db (ain.ain.ain attribute)": [[2, "ain.ain.Ain.db"]], "depositconsensusstake() (ain.ain.ain method)": [[2, "ain.ain.Ain.depositConsensusStake"]], "getblockbyhash() (ain.ain.ain method)": [[2, "ain.ain.Ain.getBlockByHash"]], "getblockbynumber() (ain.ain.ain method)": [[2, "ain.ain.Ain.getBlockByNumber"]], "getblockheaderslist() (ain.ain.ain method)": [[2, "ain.ain.Ain.getBlockHeadersList"]], "getblocklist() (ain.ain.ain method)": [[2, "ain.ain.Ain.getBlockList"]], "getblocktransactioncountbyhash() (ain.ain.ain method)": [[2, "ain.ain.Ain.getBlockTransactionCountByHash"]], "getblocktransactioncountbynumber() (ain.ain.ain method)": [[2, "ain.ain.Ain.getBlockTransactionCountByNumber"]], "getconsensusstakeamount() (ain.ain.ain method)": [[2, "ain.ain.Ain.getConsensusStakeAmount"]], "getlastblock() (ain.ain.ain method)": [[2, "ain.ain.Ain.getLastBlock"]], "getlastblocknumber() (ain.ain.ain method)": [[2, "ain.ain.Ain.getLastBlockNumber"]], "getpendingtransactions() (ain.ain.ain method)": [[2, "ain.ain.Ain.getPendingTransactions"]], "getproposerbyhash() (ain.ain.ain method)": [[2, "ain.ain.Ain.getProposerByHash"]], "getproposerbynumber() (ain.ain.ain method)": [[2, "ain.ain.Ain.getProposerByNumber"]], "getstateusage() (ain.ain.ain method)": [[2, "ain.ain.Ain.getStateUsage"]], "gettransactionbyblockhashandindex() (ain.ain.ain method)": [[2, "ain.ain.Ain.getTransactionByBlockHashAndIndex"]], "gettransactionbyblocknumberandindex() (ain.ain.ain method)": [[2, "ain.ain.Ain.getTransactionByBlockNumberAndIndex"]], "gettransactionbyhash() (ain.ain.ain method)": [[2, "ain.ain.Ain.getTransactionByHash"]], "gettransactionpoolsizeutilization() (ain.ain.ain method)": [[2, "ain.ain.Ain.getTransactionPoolSizeUtilization"]], "getvalidatorinfo() (ain.ain.ain method)": [[2, "ain.ain.Ain.getValidatorInfo"]], "getvalidatorsbyhash() (ain.ain.ain method)": [[2, "ain.ain.Ain.getValidatorsByHash"]], "getvalidatorsbynumber() (ain.ain.ain method)": [[2, "ain.ain.Ain.getValidatorsByNumber"]], "net (ain.ain.ain attribute)": [[2, "ain.ain.Ain.net"]], "provider (ain.ain.ain attribute)": [[2, "ain.ain.Ain.provider"]], "rawresultmode (ain.ain.ain attribute)": [[2, "ain.ain.Ain.rawResultMode"]], "sendsignedtransaction() (ain.ain.ain method)": [[2, "ain.ain.Ain.sendSignedTransaction"]], "sendtransaction() (ain.ain.ain method)": [[2, "ain.ain.Ain.sendTransaction"]], "sendtransactionbatch() (ain.ain.ain method)": [[2, "ain.ain.Ain.sendTransactionBatch"]], "setprovider() (ain.ain.ain method)": [[2, "ain.ain.Ain.setProvider"]], "setsigner() (ain.ain.ain method)": [[2, "ain.ain.Ain.setSigner"]], "signer (ain.ain.ain attribute)": [[2, "ain.ain.Ain.signer"]], "validateappname() (ain.ain.ain method)": [[2, "ain.ain.Ain.validateAppName"]], "wallet (ain.ain.ain attribute)": [[2, "ain.ain.Ain.wallet"]], "withdrawconsensusstake() (ain.ain.ain method)": [[2, "ain.ain.Ain.withdrawConsensusStake"]], "database (class in ain.db)": [[3, "ain.db.Database"]], "ain.db": [[3, "module-ain.db"]], "ref() (ain.db.database method)": [[3, "ain.db.Database.ref"]], "reference (class in ain.db.ref)": [[4, "ain.db.ref.Reference"]], "ain.db.ref": [[4, "module-ain.db.ref"]], "buildgetrequest() (ain.db.ref.reference static method)": [[4, "ain.db.ref.Reference.buildGetRequest"]], "decrementvalue() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.decrementValue"]], "deletevalue() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.deleteValue"]], "evalowner() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.evalOwner"]], "evalrule() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.evalRule"]], "extendpath() (ain.db.ref.reference static method)": [[4, "ain.db.ref.Reference.extendPath"]], "extendsetmultitransactioninput() (ain.db.ref.reference static method)": [[4, "ain.db.ref.Reference.extendSetMultiTransactionInput"]], "extendsettransactioninput() (ain.db.ref.reference static method)": [[4, "ain.db.ref.Reference.extendSetTransactionInput"]], "get() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.get"]], "getfunction() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.getFunction"]], "getowner() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.getOwner"]], "getproofhash() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.getProofHash"]], "getrule() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.getRule"]], "getstateinfo() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.getStateInfo"]], "getstateproof() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.getStateProof"]], "getvalue() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.getValue"]], "incrementvalue() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.incrementValue"]], "key (ain.db.ref.reference property)": [[4, "ain.db.ref.Reference.key"]], "matchfunction() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.matchFunction"]], "matchowner() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.matchOwner"]], "matchrule() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.matchRule"]], "path (ain.db.ref.reference property)": [[4, "ain.db.ref.Reference.path"]], "push() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.push"]], "pushvalue() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.pushValue"]], "sanitizeref() (ain.db.ref.reference static method)": [[4, "ain.db.ref.Reference.sanitizeRef"]], "set() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.set"]], "setfunction() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.setFunction"]], "setisglobal() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.setIsGlobal"]], "setowner() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.setOwner"]], "setrule() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.setRule"]], "setvalue() (ain.db.ref.reference method)": [[4, "ain.db.ref.Reference.setValue"]], "blockchainerror": [[5, "ain.errors.BlockchainError"]], "ain.errors": [[5, "module-ain.errors"]], "code (ain.errors.blockchainerror attribute)": [[5, "ain.errors.BlockchainError.code"]], "message (ain.errors.blockchainerror attribute)": [[5, "ain.errors.BlockchainError.message"]], "network (class in ain.net)": [[6, "ain.net.Network"]], "ain.net": [[6, "module-ain.net"]], "checkprotocolversion() (ain.net.network method)": [[6, "ain.net.Network.checkProtocolVersion"]], "getchainid() (ain.net.network method)": [[6, "ain.net.Network.getChainId"]], "getconsensusstatus() (ain.net.network method)": [[6, "ain.net.Network.getConsensusStatus"]], "geteventhandlernetworkinfo() (ain.net.network method)": [[6, "ain.net.Network.getEventHandlerNetworkInfo"]], "getnetworkid() (ain.net.network method)": [[6, "ain.net.Network.getNetworkId"]], "getpeercandidateinfo() (ain.net.network method)": [[6, "ain.net.Network.getPeerCandidateInfo"]], "getpeercount() (ain.net.network method)": [[6, "ain.net.Network.getPeerCount"]], "getprotocolversion() (ain.net.network method)": [[6, "ain.net.Network.getProtocolVersion"]], "getrawconsensusstatus() (ain.net.network method)": [[6, "ain.net.Network.getRawConsensusStatus"]], "islistening() (ain.net.network method)": [[6, "ain.net.Network.isListening"]], "issyncing() (ain.net.network method)": [[6, "ain.net.Network.isSyncing"]], "protover (ain.net.network attribute)": [[6, "ain.net.Network.protoVer"]], "provider (ain.net.network attribute)": [[6, "ain.net.Network.provider"]], "provider (class in ain.provider)": [[7, "ain.provider.Provider"]], "ain.provider": [[7, "module-ain.provider"]], "apiendpoint (ain.provider.provider attribute)": [[7, "ain.provider.Provider.apiEndPoint"]], "endpoint (ain.provider.provider attribute)": [[7, "ain.provider.Provider.endPoint"]], "getaddress() (ain.provider.provider method)": [[7, "ain.provider.Provider.getAddress"]], "send() (ain.provider.provider method)": [[7, "ain.provider.Provider.send"]], "ainoptions (class in ain.types)": [[8, "ain.types.AinOptions"]], "ecdsasignature (class in ain.types)": [[8, "ain.types.ECDSASignature"]], "eciesencrypted (class in ain.types)": [[8, "ain.types.ECIESEncrypted"]], "evalownerinput (class in ain.types)": [[8, "ain.types.EvalOwnerInput"]], "evalruleinput (class in ain.types)": [[8, "ain.types.EvalRuleInput"]], "getmultioperation (class in ain.types)": [[8, "ain.types.GetMultiOperation"]], "getoperation (class in ain.types)": [[8, "ain.types.GetOperation"]], "getoptions (class in ain.types)": [[8, "ain.types.GetOptions"]], "matchinput (class in ain.types)": [[8, "ain.types.MatchInput"]], "setmultioperation (class in ain.types)": [[8, "ain.types.SetMultiOperation"]], "setmultitransactioninput (class in ain.types)": [[8, "ain.types.SetMultiTransactionInput"]], "setoperation (class in ain.types)": [[8, "ain.types.SetOperation"]], "stateinfoinput (class in ain.types)": [[8, "ain.types.StateInfoInput"]], "transaction (class in ain.types)": [[8, "ain.types.Transaction"]], "transactionbody (class in ain.types)": [[8, "ain.types.TransactionBody"]], "transactionbodybase (class in ain.types)": [[8, "ain.types.TransactionBodyBase"]], "transactioninput (class in ain.types)": [[8, "ain.types.TransactionInput"]], "transactioninputbase (class in ain.types)": [[8, "ain.types.TransactionInputBase"]], "valueonlytransactionbodybase (class in ain.types)": [[8, "ain.types.ValueOnlyTransactionBodyBase"]], "valueonlytransactioninput (class in ain.types)": [[8, "ain.types.ValueOnlyTransactionInput"]], "address (ain.types.evalownerinput attribute)": [[8, "ain.types.EvalOwnerInput.address"]], "address (ain.types.evalruleinput attribute)": [[8, "ain.types.EvalRuleInput.address"]], "address (ain.types.setmultitransactioninput attribute)": [[8, "ain.types.SetMultiTransactionInput.address"]], "address (ain.types.transaction attribute)": [[8, "ain.types.Transaction.address"]], "address (ain.types.transactioninput attribute)": [[8, "ain.types.TransactionInput.address"]], "address (ain.types.transactioninputbase attribute)": [[8, "ain.types.TransactionInputBase.address"]], "address (ain.types.valueonlytransactioninput attribute)": [[8, "ain.types.ValueOnlyTransactionInput.address"]], "ain.types": [[8, "module-ain.types"]], "billing (ain.types.transactionbody attribute)": [[8, "ain.types.TransactionBody.billing"]], "ciphertext (ain.types.eciesencrypted attribute)": [[8, "ain.types.ECIESEncrypted.ciphertext"]], "ephempublickey (ain.types.eciesencrypted attribute)": [[8, "ain.types.ECIESEncrypted.ephemPublicKey"]], "fromsignature() (ain.types.ecdsasignature class method)": [[8, "ain.types.ECDSASignature.fromSignature"]], "gas_price (ain.types.setmultitransactioninput attribute)": [[8, "ain.types.SetMultiTransactionInput.gas_price"]], "gas_price (ain.types.transactionbody attribute)": [[8, "ain.types.TransactionBody.gas_price"]], "gas_price (ain.types.transactioninput attribute)": [[8, "ain.types.TransactionInput.gas_price"]], "gas_price (ain.types.transactioninputbase attribute)": [[8, "ain.types.TransactionInputBase.gas_price"]], "gas_price (ain.types.valueonlytransactioninput attribute)": [[8, "ain.types.ValueOnlyTransactionInput.gas_price"]], "hash (ain.types.transaction attribute)": [[8, "ain.types.Transaction.hash"]], "include_proof (ain.types.getoptions attribute)": [[8, "ain.types.GetOptions.include_proof"]], "include_tree_info (ain.types.getoptions attribute)": [[8, "ain.types.GetOptions.include_tree_info"]], "include_version (ain.types.getoptions attribute)": [[8, "ain.types.GetOptions.include_version"]], "is_final (ain.types.getoptions attribute)": [[8, "ain.types.GetOptions.is_final"]], "is_global (ain.types.evalownerinput attribute)": [[8, "ain.types.EvalOwnerInput.is_global"]], "is_global (ain.types.evalruleinput attribute)": [[8, "ain.types.EvalRuleInput.is_global"]], "is_global (ain.types.getoperation attribute)": [[8, "ain.types.GetOperation.is_global"]], "is_global (ain.types.getoptions attribute)": [[8, "ain.types.GetOptions.is_global"]], "is_global (ain.types.matchinput attribute)": [[8, "ain.types.MatchInput.is_global"]], "is_global (ain.types.setoperation attribute)": [[8, "ain.types.SetOperation.is_global"]], "is_global (ain.types.valueonlytransactionbodybase attribute)": [[8, "ain.types.ValueOnlyTransactionBodyBase.is_global"]], "is_global (ain.types.valueonlytransactioninput attribute)": [[8, "ain.types.ValueOnlyTransactionInput.is_global"]], "is_shallow (ain.types.getoptions attribute)": [[8, "ain.types.GetOptions.is_shallow"]], "iv (ain.types.eciesencrypted attribute)": [[8, "ain.types.ECIESEncrypted.iv"]], "mac (ain.types.eciesencrypted attribute)": [[8, "ain.types.ECIESEncrypted.mac"]], "nonce (ain.types.setmultitransactioninput attribute)": [[8, "ain.types.SetMultiTransactionInput.nonce"]], "nonce (ain.types.transactionbody attribute)": [[8, "ain.types.TransactionBody.nonce"]], "nonce (ain.types.transactioninput attribute)": [[8, "ain.types.TransactionInput.nonce"]], "nonce (ain.types.transactioninputbase attribute)": [[8, "ain.types.TransactionInputBase.nonce"]], "nonce (ain.types.valueonlytransactioninput attribute)": [[8, "ain.types.ValueOnlyTransactionInput.nonce"]], "op_list (ain.types.getmultioperation attribute)": [[8, "ain.types.GetMultiOperation.op_list"]], "op_list (ain.types.setmultioperation attribute)": [[8, "ain.types.SetMultiOperation.op_list"]], "op_list (ain.types.setmultitransactioninput attribute)": [[8, "ain.types.SetMultiTransactionInput.op_list"]], "operation (ain.types.transactionbody attribute)": [[8, "ain.types.TransactionBody.operation"]], "operation (ain.types.transactionbodybase attribute)": [[8, "ain.types.TransactionBodyBase.operation"]], "operation (ain.types.transactioninput attribute)": [[8, "ain.types.TransactionInput.operation"]], "parent_tx_hash (ain.types.setmultitransactioninput attribute)": [[8, "ain.types.SetMultiTransactionInput.parent_tx_hash"]], "parent_tx_hash (ain.types.transactionbody attribute)": [[8, "ain.types.TransactionBody.parent_tx_hash"]], "parent_tx_hash (ain.types.transactionbodybase attribute)": [[8, "ain.types.TransactionBodyBase.parent_tx_hash"]], "parent_tx_hash (ain.types.transactioninput attribute)": [[8, "ain.types.TransactionInput.parent_tx_hash"]], "parent_tx_hash (ain.types.valueonlytransactionbodybase attribute)": [[8, "ain.types.ValueOnlyTransactionBodyBase.parent_tx_hash"]], "parent_tx_hash (ain.types.valueonlytransactioninput attribute)": [[8, "ain.types.ValueOnlyTransactionInput.parent_tx_hash"]], "permission (ain.types.evalownerinput attribute)": [[8, "ain.types.EvalOwnerInput.permission"]], "r (ain.types.ecdsasignature attribute)": [[8, "ain.types.ECDSASignature.r"]], "rawresultmode (ain.types.ainoptions attribute)": [[8, "ain.types.AinOptions.rawResultMode"]], "ref (ain.types.evalownerinput attribute)": [[8, "ain.types.EvalOwnerInput.ref"]], "ref (ain.types.evalruleinput attribute)": [[8, "ain.types.EvalRuleInput.ref"]], "ref (ain.types.getoperation attribute)": [[8, "ain.types.GetOperation.ref"]], "ref (ain.types.matchinput attribute)": [[8, "ain.types.MatchInput.ref"]], "ref (ain.types.setoperation attribute)": [[8, "ain.types.SetOperation.ref"]], "ref (ain.types.stateinfoinput attribute)": [[8, "ain.types.StateInfoInput.ref"]], "ref (ain.types.valueonlytransactionbodybase attribute)": [[8, "ain.types.ValueOnlyTransactionBodyBase.ref"]], "ref (ain.types.valueonlytransactioninput attribute)": [[8, "ain.types.ValueOnlyTransactionInput.ref"]], "s (ain.types.ecdsasignature attribute)": [[8, "ain.types.ECDSASignature.s"]], "signature (ain.types.transaction attribute)": [[8, "ain.types.Transaction.signature"]], "timestamp (ain.types.evalruleinput attribute)": [[8, "ain.types.EvalRuleInput.timestamp"]], "timestamp (ain.types.setmultitransactioninput attribute)": [[8, "ain.types.SetMultiTransactionInput.timestamp"]], "timestamp (ain.types.transactionbody attribute)": [[8, "ain.types.TransactionBody.timestamp"]], "timestamp (ain.types.transactioninput attribute)": [[8, "ain.types.TransactionInput.timestamp"]], "timestamp (ain.types.transactioninputbase attribute)": [[8, "ain.types.TransactionInputBase.timestamp"]], "timestamp (ain.types.valueonlytransactioninput attribute)": [[8, "ain.types.ValueOnlyTransactionInput.timestamp"]], "tx_body (ain.types.transaction attribute)": [[8, "ain.types.Transaction.tx_body"]], "type (ain.types.getmultioperation attribute)": [[8, "ain.types.GetMultiOperation.type"]], "type (ain.types.getoperation attribute)": [[8, "ain.types.GetOperation.type"]], "type (ain.types.setmultioperation attribute)": [[8, "ain.types.SetMultiOperation.type"]], "type (ain.types.setoperation attribute)": [[8, "ain.types.SetOperation.type"]], "v (ain.types.ecdsasignature attribute)": [[8, "ain.types.ECDSASignature.v"]], "value (ain.types.evalruleinput attribute)": [[8, "ain.types.EvalRuleInput.value"]], "value (ain.types.setoperation attribute)": [[8, "ain.types.SetOperation.value"]], "value (ain.types.valueonlytransactionbodybase attribute)": [[8, "ain.types.ValueOnlyTransactionBodyBase.value"]], "value (ain.types.valueonlytransactioninput attribute)": [[8, "ain.types.ValueOnlyTransactionInput.value"]], "addhexprefix() (in module ain.utils)": [[9, "ain.utils.addHexPrefix"]], "ain.utils": [[9, "module-ain.utils"]], "aresameaddresses() (in module ain.utils)": [[9, "ain.utils.areSameAddresses"]], "bytestohex() (in module ain.utils)": [[9, "ain.utils.bytesToHex"]], "countdecimals() (in module ain.utils)": [[9, "ain.utils.countDecimals"]], "decryptwithprivatekey() (in module ain.utils)": [[9, "ain.utils.decryptWithPrivateKey"]], "ecrecoverpub() (in module ain.utils)": [[9, "ain.utils.ecRecoverPub"]], "ecsignhash() (in module ain.utils)": [[9, "ain.utils.ecSignHash"]], "ecsignmessage() (in module ain.utils)": [[9, "ain.utils.ecSignMessage"]], "ecsigntransaction() (in module ain.utils)": [[9, "ain.utils.ecSignTransaction"]], "ecverifysig() (in module ain.utils)": [[9, "ain.utils.ecVerifySig"]], "encodevarint() (in module ain.utils)": [[9, "ain.utils.encodeVarInt"]], "encryptwithpublickey() (in module ain.utils)": [[9, "ain.utils.encryptWithPublicKey"]], "generatemnemonic() (in module ain.utils)": [[9, "ain.utils.generateMnemonic"]], "gettimestamp() (in module ain.utils)": [[9, "ain.utils.getTimestamp"]], "hashmessage() (in module ain.utils)": [[9, "ain.utils.hashMessage"]], "hashtransaction() (in module ain.utils)": [[9, "ain.utils.hashTransaction"]], "ishexprefixed() (in module ain.utils)": [[9, "ain.utils.isHexPrefixed"]], "ishexstring() (in module ain.utils)": [[9, "ain.utils.isHexString"]], "isvalidaddress() (in module ain.utils)": [[9, "ain.utils.isValidAddress"]], "isvalidprivate() (in module ain.utils)": [[9, "ain.utils.isValidPrivate"]], "isvalidpublic() (in module ain.utils)": [[9, "ain.utils.isValidPublic"]], "keccak() (in module ain.utils)": [[9, "ain.utils.keccak"]], "mnemonictoprivatekey() (in module ain.utils)": [[9, "ain.utils.mnemonicToPrivatekey"]], "padtoeven() (in module ain.utils)": [[9, "ain.utils.padToEven"]], "privatetoaddress() (in module ain.utils)": [[9, "ain.utils.privateToAddress"]], "privatetopublic() (in module ain.utils)": [[9, "ain.utils.privateToPublic"]], "pubtoaddress() (in module ain.utils)": [[9, "ain.utils.pubToAddress"]], "replacefloat() (in module ain.utils)": [[9, "ain.utils.replaceFloat"]], "striphexprefix() (in module ain.utils)": [[9, "ain.utils.stripHexPrefix"]], "tobytes() (in module ain.utils)": [[9, "ain.utils.toBytes"]], "tochecksumaddress() (in module ain.utils)": [[9, "ain.utils.toChecksumAddress"]], "tojslikefloats() (in module ain.utils)": [[9, "ain.utils.toJsLikeFloats"]], "tojsonstring() (in module ain.utils)": [[9, "ain.utils.toJsonString"]], "cipherparams (class in ain.utils.v3keystore)": [[10, "ain.utils.v3keystore.Cipherparams"]], "crypto (class in ain.utils.v3keystore)": [[10, "ain.utils.v3keystore.Crypto"]], "v3keystore (class in ain.utils.v3keystore)": [[10, "ain.utils.v3keystore.V3Keystore"]], "v3keystoreoptions (class in ain.utils.v3keystore)": [[10, "ain.utils.v3keystore.V3KeystoreOptions"]], "address (ain.utils.v3keystore.v3keystore attribute)": [[10, "ain.utils.v3keystore.V3Keystore.address"]], "ain.utils.v3keystore": [[10, "module-ain.utils.v3keystore"]], "c (ain.utils.v3keystore.v3keystoreoptions attribute)": [[10, "ain.utils.v3keystore.V3KeystoreOptions.c"]], "cipher (ain.utils.v3keystore.crypto attribute)": [[10, "ain.utils.v3keystore.Crypto.cipher"]], "cipher (ain.utils.v3keystore.v3keystoreoptions attribute)": [[10, "ain.utils.v3keystore.V3KeystoreOptions.cipher"]], "cipherparams (ain.utils.v3keystore.crypto attribute)": [[10, "ain.utils.v3keystore.Crypto.cipherparams"]], "ciphertext (ain.utils.v3keystore.crypto attribute)": [[10, "ain.utils.v3keystore.Crypto.ciphertext"]], "crypto (ain.utils.v3keystore.v3keystore attribute)": [[10, "ain.utils.v3keystore.V3Keystore.crypto"]], "dklen (ain.utils.v3keystore.v3keystoreoptions attribute)": [[10, "ain.utils.v3keystore.V3KeystoreOptions.dklen"]], "fromjson() (ain.utils.v3keystore.v3keystore class method)": [[10, "ain.utils.v3keystore.V3Keystore.fromJSON"]], "fromprivatekey() (ain.utils.v3keystore.v3keystore class method)": [[10, "ain.utils.v3keystore.V3Keystore.fromPrivateKey"]], "id (ain.utils.v3keystore.v3keystore attribute)": [[10, "ain.utils.v3keystore.V3Keystore.id"]], "iv (ain.utils.v3keystore.cipherparams attribute)": [[10, "ain.utils.v3keystore.Cipherparams.iv"]], "iv (ain.utils.v3keystore.v3keystoreoptions attribute)": [[10, "ain.utils.v3keystore.V3KeystoreOptions.iv"]], "kdf (ain.utils.v3keystore.crypto attribute)": [[10, "ain.utils.v3keystore.Crypto.kdf"]], "kdf (ain.utils.v3keystore.v3keystoreoptions attribute)": [[10, "ain.utils.v3keystore.V3KeystoreOptions.kdf"]], "kdfparams (ain.utils.v3keystore.crypto attribute)": [[10, "ain.utils.v3keystore.Crypto.kdfparams"]], "mac (ain.utils.v3keystore.crypto attribute)": [[10, "ain.utils.v3keystore.Crypto.mac"]], "n (ain.utils.v3keystore.v3keystoreoptions attribute)": [[10, "ain.utils.v3keystore.V3KeystoreOptions.n"]], "p (ain.utils.v3keystore.v3keystoreoptions attribute)": [[10, "ain.utils.v3keystore.V3KeystoreOptions.p"]], "r (ain.utils.v3keystore.v3keystoreoptions attribute)": [[10, "ain.utils.v3keystore.V3KeystoreOptions.r"]], "salt (ain.utils.v3keystore.v3keystoreoptions attribute)": [[10, "ain.utils.v3keystore.V3KeystoreOptions.salt"]], "toprivatekey() (ain.utils.v3keystore.v3keystore method)": [[10, "ain.utils.v3keystore.V3Keystore.toPrivateKey"]], "uuid (ain.utils.v3keystore.v3keystoreoptions attribute)": [[10, "ain.utils.v3keystore.V3KeystoreOptions.uuid"]], "version (ain.utils.v3keystore.v3keystore attribute)": [[10, "ain.utils.v3keystore.V3Keystore.version"]], "wallet (class in ain.wallet)": [[11, "ain.wallet.Wallet"]], "accounttov3keystore() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.accountToV3Keystore"]], "accounts (ain.wallet.wallet attribute)": [[11, "ain.wallet.Wallet.accounts"]], "add() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.add"]], "addandsetdefaultaccount() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.addAndSetDefaultAccount"]], "addfromhdwallet() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.addFromHDWallet"]], "addfromv3keystore() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.addFromV3Keystore"]], "ain (ain.wallet.wallet attribute)": [[11, "ain.wallet.Wallet.ain"]], "ain.wallet": [[11, "module-ain.wallet"]], "chainid (ain.wallet.wallet attribute)": [[11, "ain.wallet.Wallet.chainId"]], "clear() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.clear"]], "create() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.create"]], "defaultaccount (ain.wallet.wallet attribute)": [[11, "ain.wallet.Wallet.defaultAccount"]], "getbalance() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.getBalance"]], "gethashstrfromsig() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.getHashStrFromSig"]], "getimpliedaddress() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.getImpliedAddress"]], "getnonce() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.getNonce"]], "getpublickey() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.getPublicKey"]], "gettimestamp() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.getTimestamp"]], "isadded() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.isAdded"]], "length (ain.wallet.wallet property)": [[11, "ain.wallet.Wallet.length"]], "recover() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.recover"]], "remove() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.remove"]], "removedefaultaccount() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.removeDefaultAccount"]], "setdefaultaccount() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.setDefaultAccount"]], "sign() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.sign"]], "signtransaction() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.signTransaction"]], "tov3keystore() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.toV3Keystore"]], "transfer() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.transfer"]], "verifysignature() (ain.wallet.wallet method)": [[11, "ain.wallet.Wallet.verifySignature"]]}})